CREATE SCHEMA STUDENTCARE CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE STUDENTCARE;

CREATE TABLE STAFF(
	ID CHAR(4) PRIMARY KEY,
    FIRSTNAME VARCHAR(50),
    LASTNAME VARCHAR(50),
    SEX CHAR(1),
    EMAIL VARCHAR(320),
    CHECK (SEX = "F" OR SEX = "M" OR SEX = "U")
);

CREATE TABLE MANAGER(
	ID CHAR(4) PRIMARY KEY,
    EXPERIENCE INT CHECK (EXPERIENCE >= 5),
    FOREIGN KEY (ID) REFERENCES STAFF(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE STUDENTCARESTAFF(
	ID CHAR(4) PRIMARY KEY,
    FOREIGN KEY (ID) REFERENCES STAFF(ID) ON UPDATE CASCADE ON DELETE CASCADE
);
/* 
Check total specialization of Staff.
Constraint disjoint of Manager, StudentCareStaff.
*/

CREATE TABLE TRAININGDEPARTMENT_STAFF(
	ID CHAR(4) PRIMARY KEY,
    FOREIGN KEY (ID) REFERENCES STUDENTCARESTAFF(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE POLITICAL_STAFF(
	ID CHAR(4) PRIMARY KEY,
    FOREIGN KEY (ID) REFERENCES STUDENTCARESTAFF(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE MEDICAL_STAFF(
	ID CHAR(4) PRIMARY KEY,
    DEGREE VARCHAR(255),
    FOREIGN KEY (ID) REFERENCES STUDENTCARESTAFF(ID) ON UPDATE CASCADE ON DELETE CASCADE
);
/*
Check total specialization of StudentCareStaff.
Constraint disjoint of MedicalStaff, TrainingDepartmentStaff, PoliticalStaff.
*/

CREATE TABLE STUDENT(
	ID CHAR(5) PRIMARY KEY,
    FIRSTNAME VARCHAR(50),
    LASTNAME VARCHAR(50),
    DOB DATE,
    SEX CHAR(1),
    EMAIL VARCHAR(320),
    CHECK (SEX = "F" OR SEX = "M" OR SEX = "U")
);

CREATE TABLE SEMESTER(
	CODE CHAR(3) PRIMARY KEY
);

CREATE TABLE GENERAL_INFORMATION(
	TITLE VARCHAR(100) PRIMARY KEY,
    TYPE VARCHAR(100),
    CONTENT TEXT
);

CREATE TABLE EVENT(
	NAME VARCHAR(255) PRIMARY KEY,
    LIMITED INT CHECK (LIMITED > 0),
    CONTENT TEXT,
    TRAININGPOINT INT CHECK (TRAININGPOINT = 5 OR TRAININGPOINT = 10)
);

CREATE TABLE INCENTIVESCHOLARSHIP_RESULT(
	NAME VARCHAR(255) PRIMARY KEY,
    INFORMATION TEXT
); 

CREATE TABLE JOBSCHOLARSHIP_INFOR(
	ID VARCHAR(10) PRIMARY KEY,
    TITLE VARCHAR(100),
    CONTENT TEXT,
    ENTERPRISE VARCHAR(255)
);

CREATE TABLE QUESTION(
	ID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    STUDENTID CHAR(5) NOT NULL,
    TIMESTAMP DATETIME NOT NULL,
    TYPE VARCHAR(100),
    TITLE VARCHAR(100),
    CONTENT TEXT,
	UNIQUE (STUDENTID, TIMESTAMP),
    FOREIGN KEY (STUDENTID) REFERENCES STUDENT(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE ANSWER(
	ID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    QUESTIONID INT UNSIGNED NOT NULL, 
    STUDENTCARESTAFFID CHAR(4) NOT NULL,
    TIMESTAMP DATETIME NOT NULL,
    UNIQUE (QUESTIONID, STUDENTCARESTAFFID, TIMESTAMP),
    CONTENT TEXT,
    FOREIGN KEY (QUESTIONID) REFERENCES QUESTION(ID) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (STUDENTCARESTAFFID) REFERENCES STUDENTCARESTAFF(ID) ON UPDATE CASCADE ON DELETE CASCADE
); 

CREATE TABLE GUARDIAN(
	STUDENTID CHAR(5),
    NAME VARCHAR(255),
    RELATIONSHIP VARCHAR(100),
    PRIMARY KEY (STUDENTID, NAME),
    FOREIGN KEY (STUDENTID) REFERENCES STUDENT(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE REQUEST_SERVICES(
	STUDENTID CHAR(5), 
    TIMESTAMP DATETIME,
    ID CHAR(1), 
    CONTENT TEXT,
    PRIMARY KEY (STUDENTID, TIMESTAMP),
    FOREIGN KEY (STUDENTID) REFERENCES STUDENT(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE REQUEST_COUNSELLING(
	STUDENTID CHAR(5), 
    REQUEST_TIMESTAMP DATETIME,
	DATE DATE,
    TIME VARCHAR(9) CHECK (TIME="AFTERNOON" OR TIME="MORNING"),
    REQUEST_CONTENT TEXT,
    PRIMARY KEY (STUDENTID, REQUEST_TIMESTAMP),
    FOREIGN KEY (STUDENTID) REFERENCES STUDENT(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE FEEDBACK(
	STUDENTID CHAR(5),
    TIMESTAMP DATETIME,
    TITLE VARCHAR(100),
    CONTENT TEXT,
    PRIMARY KEY (STUDENTID, TIMESTAMP),
    FOREIGN KEY (STUDENTID) REFERENCES STUDENT(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

ALTER TABLE INCENTIVESCHOLARSHIP_RESULT ADD(
	SEMESTERCODE CHAR(3) NOT NULL,
    FOREIGN KEY (SEMESTERCODE) REFERENCES SEMESTER(CODE) ON UPDATE CASCADE ON DELETE CASCADE
); 

ALTER TABLE STUDENTCARESTAFF ADD(
	MANAGERID CHAR(4),
    FOREIGN KEY (MANAGERID) REFERENCES MANAGER(ID) ON UPDATE CASCADE ON DELETE SET NULL
); /* Check total participation of Manager */

ALTER TABLE REQUEST_SERVICES ADD(
	TRAININGDEPARTMENT_STAFFID CHAR(4), 
    STATUS VARCHAR(11) DEFAULT "Waiting", 
    FOREIGN KEY (TRAININGDEPARTMENT_STAFFID) REFERENCES TRAININGDEPARTMENT_STAFF(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

ALTER TABLE REQUEST_COUNSELLING ADD(
	MEDICAL_STAFFID CHAR(4), 
    RESPONSE_TIMESTAMP DATETIME, 
    RESPONSE_CONTENT TEXT,
    FOREIGN KEY (MEDICAL_STAFFID) REFERENCES MEDICAL_STAFF(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

ALTER TABLE GENERAL_INFORMATION ADD(
	TIMESTAMP DATETIME,
    STUDENTCARE_STAFFID CHAR(4) NOT NULL,
    FOREIGN KEY (STUDENTCARE_STAFFID) REFERENCES STUDENTCARESTAFF(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

ALTER TABLE INCENTIVESCHOLARSHIP_RESULT ADD(
    TRAININGDEPARTMENT_STAFFID CHAR(4) NOT NULL,
    FOREIGN KEY (TRAININGDEPARTMENT_STAFFID) REFERENCES TRAININGDEPARTMENT_STAFF(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

ALTER TABLE JOBSCHOLARSHIP_INFOR ADD(
    POLITICAL_STAFFID CHAR(4) NOT NULL,
    FOREIGN KEY (POLITICAL_STAFFID) REFERENCES POLITICAL_STAFF(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

ALTER TABLE EVENT ADD(
	SEMESTERCODE CHAR(3) NOT NULL,
    FOREIGN KEY (SEMESTERCODE) REFERENCES SEMESTER(CODE) ON UPDATE CASCADE ON DELETE CASCADE
); 

ALTER TABLE EVENT ADD(
	TIMESTAMP DATETIME,
    POLITICAL_STAFFID CHAR(4) NOT NULL,
    FOREIGN KEY (POLITICAL_STAFFID) REFERENCES POLITICAL_STAFF(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE REGISTEREVENT (
	STUDENTID CHAR(5),
    EVENTNAME VARCHAR(255),
    PRIMARY KEY (STUDENTID, EVENTNAME),
    FOREIGN KEY (STUDENTID) REFERENCES STUDENT(ID) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (EVENTNAME) REFERENCES EVENT(NAME) ON UPDATE CASCADE ON DELETE CASCADE
); 

CREATE TABLE STUDY(
	STUDENTID CHAR(5),
    SEMESTERCODE CHAR(3),
    GPA DECIMAL(3,1) CHECK (GPA >= 0.0 AND GPA <= 10.0),
    TRAININGPOINT INT CHECK (TRAININGPOINT >= 50 AND TRAININGPOINT <= 100 AND MOD(TRAININGPOINT, 5) = 0),
    PRIMARY KEY (STUDENTID, SEMESTERCODE),
    FOREIGN KEY (STUDENTID) REFERENCES STUDENT(ID) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (SEMESTERCODE) REFERENCES SEMESTER(CODE) ON UPDATE CASCADE ON DELETE CASCADE
); /* Check total participation of Semester. */

CREATE TABLE PROVIDE_INCENTIVESCHOLARSHIP_RESULT(
	STUDENTID CHAR(5),
    NAME VARCHAR(255),
    PRIMARY KEY (STUDENTID, NAME),
    FOREIGN KEY (STUDENTID) REFERENCES STUDENT(ID) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (NAME) REFERENCES INCENTIVESCHOLARSHIP_RESULT(NAME) ON UPDATE CASCADE ON DELETE CASCADE
); /* Check total participation of IncentiveScholarshipResult.
	Check GPA >= 8.0, TrainingPoint >= 80*/

CREATE TABLE STUDENT_CONTACTADDRESS(
	ID CHAR(5),
    PHONENUM VARCHAR(10),
    ADDRESS VARCHAR(255),
    PRIMARY KEY (ID, PHONENUM, ADDRESS),
    FOREIGN KEY (ID) REFERENCES STUDENT(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE GUARDIAN_CONTACTADDRESS(
	NAME VARCHAR(255),
	STUDENTID CHAR(5),
    PHONENUM VARCHAR(10),
    ADDRESS VARCHAR(255),
    PRIMARY KEY (NAME, STUDENTID, PHONENUM, ADDRESS),
    FOREIGN KEY (STUDENTID, NAME) REFERENCES GUARDIAN(STUDENTID, NAME) ON UPDATE CASCADE ON DELETE CASCADE
);







    

